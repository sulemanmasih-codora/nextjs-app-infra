name: Get EC2 IP Address

on:
  workflow_dispatch:
    inputs:
      ec2_instance_name:
        description: 'The name of the EC2 instance'
        required: true
      apply_changes:
        description: 'Apply changes (true/false)'
        default: 'false'

jobs:
  get-ec2-ip:
    runs-on: ubuntu-latest
    environment: ${{ github.determine_env.ENVIRONMENT }}

    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug AWS Secrets
      run: |
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "AWS_ACCESS_KEY_ID is not set"
        else
          echo "AWS_ACCESS_KEY_ID is set"
        fi

    - name: Determine Environment from Instance Name
      id: determine_env
      run: |
        case "${{ github.event.inputs.ec2_instance_name }}" in
          lexim-dev-*)    ENVIRONMENT="lexim-dev" ;;
          lexim-stage-*)  ENVIRONMENT="lexim-stage" ;;
          lexim-prod-*)   ENVIRONMENT="lexim-prod" ;;
          tcp-dev-*)      ENVIRONMENT="tcp-dev" ;;
          tcp-prod-*)     ENVIRONMENT="tcp-prod" ;;
          custody-dev-*)  ENVIRONMENT="custody-dev" ;;
          custody-stage-*) ENVIRONMENT="custody-stage" ;;
          dbg-dev-*)      ENVIRONMENT="dbg-dev" ;;
          dbg-stage-*)    ENVIRONMENT="dbg-stage" ;;
          dbg-prod-*)     ENVIRONMENT="dbg-prod" ;;
          dau-vault-prod-*) ENVIRONMENT="dau-vault-prod" ;;
          lexim-prod-dxb-*) ENVIRONMENT="lexim-prod-dxb" ;;
          *) echo "No matching environment found for instance name '${{ github.event.inputs.ec2_instance_name }}'"
             exit 1 ;;
        esac
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "Determined environment: $ENVIRONMENT"

    - name: Set Environment Dynamically
      run: echo "::set-output name=env::${{ env.ENVIRONMENT }}"

    - name: Retrieve EC2 IP Address
      id: get_ip
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ github.event.inputs.ec2_instance_name }}" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        if [ -z "$INSTANCE_ID" ]; then
          echo "EC2 instance with the name '${{ github.event.inputs.ec2_instance_name }}' not found"
          exit 1
        fi
        IP_ADDRESS=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].PublicIpAddress" \
          --output text)
        echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

    - name: Output IP Address
      run: |
        echo "The IP address for ${{ github.event.inputs.ec2_instance_name }} in ${{ env.ENVIRONMENT }} is: ${{ env.IP_ADDRESS }}"
