name: Get EC2 IP Address

on:
  workflow_dispatch:
    inputs:
      ec2_instance_name:
        description: 'The name of the EC2 instance'
        required: true
      apply_changes:
        description: 'Apply changes (true/false)'
        default: 'false'

jobs:
  get-ec2-ip:
    runs-on: ubuntu-latest

    steps:
    - name: Determine Environment from EC2 Instance Name
      id: determine_env
      run: |
        EC2_INSTANCE_NAME=${{ github.event.inputs.ec2_instance_name }}
        case $EC2_INSTANCE_NAME in
          lexim-dev-bastion-host) ENVIRONMENT="lexim-dev" ;;
          lexim-stage-bastion-host) ENVIRONMENT="lexim-stage" ;;
          lexim-prod-bastion-host) ENVIRONMENT="lexim-prod" ;;
          tcp-dev-bastion-host) ENVIRONMENT="tcp-dev" ;;
          tcp-prod-bastion-host) ENVIRONMENT="tcp-prod" ;;
          custody-dev-bastion-host) ENVIRONMENT="custody-dev" ;;
          custody-stage-bastion-host) ENVIRONMENT="custody-stage" ;;
          dbg-dev-bastion-host) ENVIRONMENT="dbg-dev" ;;
          dbg-stage-bastion-host) ENVIRONMENT="dbg-stage" ;;
          dbg-prod-bastion-host) ENVIRONMENT="dbg-prod" ;;
          dau-vault-prod-bastion-host) ENVIRONMENT="dau-vault-prod" ;;
          lexim-prod-dxb-bastion-host) ENVIRONMENT="lexim-prod-dxb" ;;
          *) echo "No matching environment found for the EC2 instance name: $EC2_INSTANCE_NAME"; exit 1 ;;
        esac
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
        echo "Environment determined as: $ENVIRONMENT"

    - name: Set up AWS CLI for the determined environment
      id: aws_setup
      run: |
        # Fetch AWS credentials based on the determined environment
        echo "Fetching secrets for the environment: ${{ env.ENVIRONMENT }}"
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Retrieve EC2 IP Address
      id: get_ip
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ github.event.inputs.ec2_instance_name }}" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        if [ -z "$INSTANCE_ID" ]; then
          echo "EC2 instance with the name '${{ github.event.inputs.ec2_instance_name }}' not found"
          exit 1
        fi
        IP_ADDRESS=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[*].Instances[*].PublicIpAddress" \
          --output text)
        echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

    - name: Output IP Address
      run: |
        echo "The IP address is: ${{ env.IP_ADDRESS }}"
        echo "The environment is: ${{ env.ENVIRONMENT }}"
